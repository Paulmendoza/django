[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ project_name }}"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [{ name = "Paul Mendoza", email = "pjamendoza@proton.me" }]
dependencies = [
  "django[argon2]>=4.2.0,<5.0",     # password hasher
  "django-browser-reload>=1.17.0",  # live reload
  "django-environ>=0.11.2",         # 12factor way of config
  "django-htmx>=1.21.0",            # htmx helpers
  "django-tailwind-cli>=2.20.1",    # tailwind css support
  "whitenoise[brotli]>=6.8.2",      # static file support
]

[tool.hatch.version]
path = "{{ project_name }}/__version__.py"

# Default environment
[tool.hatch.envs.default]
dependencies = [
  "django-types",   # django type stubs
  "model-bakery",   # automagic fixture creation (in db)
  "pytest",         # unit test framework
  "pytest-django",  # convenience django 
  "pytest-mock",    # pytest mocker
]

[tool.hatch.envs.default.scripts]
runserver = "python manage.py tailwind runserver {args}"
migrate = "python manage.py migrate {args}"
makemigrations = "python manage.py makemigrations {args}"

[tool.hatch.envs.test.scripts]
test = "pytest --no-header {args}"

[tool.hatch.envs.test]
dependencies = [
  "pytest",
  "pytest-django",
]

# Lint environment
[tool.hatch.envs.lint]
dependencies = [
    # Tools
  "pyright",
  "curlylint",
  "ruff",
  # Libraries / Typestubs
  "django-types",
  "pytest",
  "pytest-django",
]

[tool.hatch.envs.lint.scripts]
run-pyright = "pyright {args:.}"
run-ruff = "ruff check --quiet --fix --exit-non-zero-on-fix {args:.}"
python = ["run-pyright", "run-ruff"]
templates = ["run-curlylint"]
all = ["python", "templates"]

# Pyright
[tool.pyright]
typeCheckingMode = "basic"

# Ruff
[tool.ruff]
target-version = "py313"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["django_tailwind_cli"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# Curlylint
[tool.curlylint]
include = '\.(html|jinja)$'
exclude = '''
(
  /(
      \.eggs           # exclude a few common directories in the root of the project
    | \.git
    | \.venv
    | \.ruff_cache
  )/
  | webpack-stats.html # also separately exclude a file named webpack-stats.html in the root of the project
)
'''

[tool.curlylint.rules]
indent = 4
aria_role = true
django_forms_rendering = true
image_alt = true
meta_viewport = true
no_autofocus = true
tabindex_no_positive = true